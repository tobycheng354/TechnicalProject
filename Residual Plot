import math
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc
import matplotlib as mpl
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
import statistics
rc = {"font.family" : "serif", 
      "mathtext.fontset" : "stix"}
plt.rcParams.update(rc)
plt.rcParams["font.serif"] = ["Times New Roman"] + plt.rcParams["font.serif"]
plt.style.use('ggplot')
COLOR = 'black'
mpl.rcParams['text.color'] = COLOR
mpl.rcParams['axes.labelcolor'] = COLOR
mpl.rcParams['xtick.color'] = COLOR
mpl.rcParams['ytick.color'] = COLOR


#data
data1 = pd.read_csv("~/Desktop/ResultsAstro.csv")
HVI1 = data1['HorizontalVelIn']
VVI1 = data1['VerticalVelIn']
SI1 = data1['SpinIn']
HVO1 = data1['HorizontalVelOut']
VVO1 = data1['VerticalVelOut']
SO1 = data1['SpinOut']
n1 = len(data1)

data2 = pd.read_csv("~/Desktop/ResultsCourse.csv")
HVI2 = data2['HorizontalVelIn']
VVI2 = data2['VerticalVelIn']
SI2 = data2['SpinIn']
HVO2 = data2['HorizontalVelOut']
VVO2 = data2['VerticalVelOut']
SO2 = data2['SpinOut']
n2 = len(data2)

#ASTRO
#setup
output_x_velocities1 = []
output_y_velocities1 = []
output_a_velocities1 = []
r = 0.0202
for i in range(0, n1):
    #inputs
    ix = HVI1[i]
    iy = VVI1[i]
    iw = SI1[i]
    vel = (math.sqrt((HVI1[i]*HVI1[i]) + (VVI1[i]*VVI1[i])))
    vel_dir = math.atan(VVI1[i]/HVI1[i])
    mu = 0.6464646464646465

    ang = 15.4 * (vel / 18.6)  * (math.degrees(vel_dir) / 44.4)

    
    #convert
    theta = math.radians(abs(ang))
    ixdash = (ix * math.cos(theta)) - (abs(iy) * math.sin(theta))
    iydash = (ix * math.sin(theta)) + (abs(iy) * math.cos(theta))
    
    if abs(iy) <= 20:
        e = 0.510 - (0.0375 * abs(iydash)) + (0.000903 * abs(iydash) * abs(iydash))
    else:
        e = 0.120
        

    #slip/roll
    mu_c = (2*(ixdash + (r*iw)))/(7*(1+e)*(iydash))  
    if mu <= mu_c: #bounce
        rxdash = ixdash - ((mu * abs(iydash))*(1+e))
        rydash = e * abs(iydash)
        rw = iw - (((5*mu)/(2*r))*(abs(iydash))*(1+e))
    else: #roll
        rxdash = ((5/7)*ixdash) - ((2/7)*r*iw)
        rydash = e*abs(iydash)
        rw = -rxdash/r
    
    #output
    rx = (rxdash * math.cos(theta)) - (rydash * math.sin(theta))
    ry = (rxdash * math.sin(theta)) + (rydash * math.cos(theta))
    output_x_velocities1.append(rx)
    output_y_velocities1.append(ry)
    output_a_velocities1.append(rw)


#COURSE
#setup
output_x_velocities2 = []
output_y_velocities2 = []
output_a_velocities2 = []
r = 0.0202
for i in range(0, n2):
    #inputs
    ix = HVI2[i]
    iy = VVI2[i]
    iw = SI2[i]
    vel = (math.sqrt((HVI2[i]*HVI2[i]) + (VVI2[i]*VVI2[i])))
    vel_dir = math.atan(VVI2[i]/HVI2[i])
    mu = 0.5555555
        
    ang = 15.4 * (vel / 18.6)  * (math.degrees(vel_dir) / 44.4)
    
    #convert
    theta = math.radians(abs(ang))
    ixdash = (ix * math.cos(theta)) - (abs(iy) * math.sin(theta))
    iydash = (ix * math.sin(theta)) + (abs(iy) * math.cos(theta))
    
    if abs(iy) <= 20:
        e = 0.510 - (0.0375 * abs(iydash)) + (0.000903 * abs(iydash) * abs(iydash))
    else:
        e = 0.120

    #slip/roll
    mu_c = (2*(ixdash + (r*iw)))/(7*(1+e)*(iydash))  
    if mu <= mu_c: #bounce
        rxdash = ixdash - ((mu * abs(iydash))*(1+e))
        rydash = e * abs(iydash)
        rw = iw - (((5*mu)/(2*r))*(abs(iydash))*(1+e))
    else: #roll
        rxdash = ((5/7)*ixdash) - ((2/7)*r*iw)
        rydash = e*abs(iydash)
        rw = -rxdash/r
    
    #output
    rx = (rxdash * math.cos(theta)) - (rydash * math.sin(theta))
    ry = (rxdash * math.sin(theta)) + (rydash * math.cos(theta))
    output_x_velocities2.append(rx)
    output_y_velocities2.append(ry)
    output_a_velocities2.append(rw)

MSD_x1 = mean_squared_error(HVO1, output_x_velocities1, squared = False)/abs(statistics.mean(HVO1))
MSD_y1 = mean_squared_error(VVO1, output_y_velocities1, squared = False)/abs(statistics.mean(VVO1))
MSD_a1 = mean_squared_error(SO1, output_a_velocities1, squared = False)/abs(statistics.mean(SO1))
print(MSD_x1, MSD_y1, MSD_a1)

r2_x1 = r2_score(HVO1,output_x_velocities1) * 100
r2_y1 = r2_score(VVO1,output_y_velocities1) * 100
r2_a1 = r2_score(SO1,output_a_velocities1) * 100
print(r2_x1, r2_y1, r2_a1)

MSD_x2 = mean_squared_error(HVO2, output_x_velocities2, squared = False)/abs(statistics.mean(HVO2))
MSD_y2 = mean_squared_error(VVO2, output_y_velocities2, squared = False)/abs(statistics.mean(VVO2))
MSD_a2 = mean_squared_error(SO2, output_a_velocities2, squared = False)/abs(statistics.mean(SO2))
print(MSD_x2, MSD_y2, MSD_a2)

r2_x2 = r2_score(HVO2,output_x_velocities2) * 100
r2_y2 = r2_score(VVO2,output_y_velocities2) * 100
r2_a2 = r2_score(SO2,output_a_velocities2) * 100
print(r2_x2, r2_y2, r2_a2)

min_val_x = min(min(HVO1), min(HVO2), min(output_x_velocities1), min(output_x_velocities2))
max_val_x = max(max(HVO1), max(HVO2), max(output_x_velocities1), max(output_x_velocities2))

min_val_y = min(min(VVO1), min(VVO2), min(output_y_velocities1), min(output_y_velocities2))
max_val_y = max(max(VVO1), max(VVO2), max(output_y_velocities1), max(output_y_velocities2))

min_val_a = min(min(SO1), min(SO2), min(output_a_velocities1), min(output_a_velocities2))
max_val_a = max(max(SO1), max(SO2), max(output_a_velocities1), max(output_a_velocities2))

col1 = "tab:blue"
col2 = "tab:orange"
dot_size = 16

fig, axs = plt.subplots(1,3,figsize=(15, 15))
axs[0].scatter(HVO1, output_x_velocities1, s = dot_size, marker = '.', color = col1, label = "Astro")
axs[0].scatter(HVO2, output_x_velocities2, s = dot_size, marker = '.', color = col2, label = "Course")
axs[0].plot(np.arange(min_val_x, max_val_x), np.arange(min_val_x, max_val_x), "--", color ='black', linewidth = 1)
axs[0].set(ylabel = "True Value")
axs[0].set_box_aspect(1)
axs[0].legend()
axs[0].title.set_text(r"$\dot{x}$")

axs[1].scatter(VVO1, output_y_velocities1, s = dot_size, marker = '.', color = col1)
axs[1].scatter(VVO2, output_y_velocities2, s = dot_size, marker = '.', color = col2)
axs[1].plot(np.arange(min_val_y, max_val_y), np.arange(min_val_y, max_val_y), "--", color ='black', linewidth = 1)
axs[1].set(xlabel = "Predictions")
axs[1].set_box_aspect(1)
axs[1].title.set_text(r"$\dot{y}$")
    
axs[2].scatter(SO1, output_a_velocities1, s = dot_size, marker = '.', color = col1)
axs[2].scatter(SO2, output_a_velocities2, s = dot_size, marker = '.', color = col2)
axs[2].plot(np.arange(min_val_a, max_val_a), np.arange(min_val_a, max_val_a), "--", color ='black', linewidth = 1)
axs[2].set_box_aspect(1)
axs[2].title.set_text(r"$\dot{\theta}$")

plt.subplots_adjust(wspace=0.15, hspace=0)

