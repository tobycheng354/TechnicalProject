#imports and setup
import numpy  as np
import matplotlib.pyplot as plt
import pandas as pd
from matplotlib import cm
import math
import random
import matplotlib as mpl
import matplotlib.font_manager as font_manager
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
import statistics
from matplotlib import gridspec
import math
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc
import matplotlib as mpl
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
import statistics
import matplotlib.colors as colors
plt.style.use('default')
mpl.rcParams['font.family']='serif'
cmfont = font_manager.FontProperties(fname=mpl.get_data_path() + '/fonts/ttf/cmr10.ttf')
mpl.rcParams['font.serif']=cmfont.get_name()
mpl.rcParams['mathtext.fontset']='cm'
mpl.rcParams['axes.unicode_minus']=False
num_iter = 10

#data
data2 = pd.read_csv("~/Desktop/ResultsAstro.csv")
HVI2 = data2['HorizontalVelIn']
VVI2 = data2['VerticalVelIn']
SI2 = data2['SpinIn']
HVO2 = data2['HorizontalVelOut']
VVO2 = data2['VerticalVelOut']
SO2 = data2['SpinOut']
n2 = len(data2)



#param searches
def no_param_search(angs, mus, es):
    output_x_velocities2 = []
    output_y_velocities2 = []
    output_a_velocities2 = []
    r = 0.0202
    for i in range(0, n2):
        #inputs
        ix = HVI2[i]
        iy = VVI2[i]
        iw = SI2[i]
        vel = (math.sqrt((HVI2[i]*HVI2[i]) + (VVI2[i]*VVI2[i])))
        vel_dir = math.atan(VVI2[i]/HVI2[i])
       
        theta = angs(vel_dir)
        mu = mus(iw)
        e = es(vel_dir)
        
        #convert
        ixdash = (ix * math.cos(theta)) - (abs(iy) * math.sin(theta))
        iydash = (ix * math.sin(theta)) + (abs(iy) * math.cos(theta))
        

        #slip/roll
        mu_c = (2*(ixdash + (r*iw)))/(7*(1+e)*(iydash))  
        if mu <= mu_c: #bounce
            rxdash = ixdash - ((mu * abs(iydash))*(1+e))
            rydash = e * abs(iydash)
            rw = iw - (((5*mu)/(2*r))*(abs(iydash))*(1+e))
        else: #roll
            rxdash = ((5/7)*ixdash) - ((2/7)*r*iw)
            rydash = e*abs(iydash)
            rw = -rxdash/r
        
        #output
        rx = (rxdash * math.cos(theta)) - (rydash * math.sin(theta))
        ry = (rxdash * math.sin(theta)) + (rydash * math.cos(theta))
        output_x_velocities2.append(rx)
        output_y_velocities2.append(ry)
        output_a_velocities2.append(rw)
    MSD_x2 = mean_squared_error(HVO2, output_x_velocities2, squared = False)/abs(statistics.mean(HVO2))
    MSD_y2 = mean_squared_error(VVO2, output_y_velocities2, squared = False)/abs(statistics.mean(VVO2))
    MSD_a2 = mean_squared_error(SO2, output_a_velocities2, squared = False)/abs(statistics.mean(SO2))
    NRMSE = MSD_x2 + MSD_y2 + MSD_a2
    return NRMSE
    
def one_param_search(angs, mus, es, loc):
    if loc == 1:
        errors = []
        for ang in angs:
            output_x_velocities2 = []
            output_y_velocities2 = []
            output_a_velocities2 = []
            r = 0.0202
            for i in range(0, n2):
                #inputs
                ix = HVI2[i]
                iy = VVI2[i]
                iw = SI2[i]
                vel = (math.sqrt((HVI2[i]*HVI2[i]) + (VVI2[i]*VVI2[i])))
                vel_dir = math.atan(VVI2[i]/HVI2[i])
                    
                theta = math.radians(ang)
                mu = mus(iw)
                e = es(vel_dir)
                       
                #convert
                ixdash = (ix * math.cos(theta)) - (abs(iy) * math.sin(theta))
                iydash = (ix * math.sin(theta)) + (abs(iy) * math.cos(theta))
                
                #slip/roll
                mu_c = (2*(ixdash + (r*iw)))/(7*(1+e)*(iydash))  
                if mu <= mu_c: #bounce
                    rxdash = ixdash - ((mu * abs(iydash))*(1+e))
                    rydash = e * abs(iydash)
                    rw = iw - (((5*mu)/(2*r))*(abs(iydash))*(1+e))
                else: #roll
                    rxdash = ((5/7)*ixdash) - ((2/7)*r*iw)
                    rydash = e*abs(iydash)
                    rw = -rxdash/r
                
                #output
                rx = (rxdash * math.cos(theta)) - (rydash * math.sin(theta))
                ry = (rxdash * math.sin(theta)) + (rydash * math.cos(theta))
                output_x_velocities2.append(rx)
                output_y_velocities2.append(ry)
                output_a_velocities2.append(rw)
                
            MSD_x2 = mean_squared_error(HVO2, output_x_velocities2, squared = False)/abs(statistics.mean(HVO2))
            MSD_y2 = mean_squared_error(VVO2, output_y_velocities2, squared = False)/abs(statistics.mean(VVO2))
            MSD_a2 = mean_squared_error(SO2, output_a_velocities2, squared = False)/abs(statistics.mean(SO2))
            errors.append(MSD_x2 + MSD_y2 + MSD_a2)
        errors = np.array(errors)
        min_idx = np.unravel_index(errors.argmin(), errors.shape)
        min_param = angs[min_idx]          
    elif loc == 2:
        errors = []
        for mu in mus:
            output_x_velocities2 = []
            output_y_velocities2 = []
            output_a_velocities2 = []
            r = 0.0202
            for i in range(0, n2):
                #inputs
                ix = HVI2[i]
                iy = VVI2[i]
                iw = SI2[i]
                vel = (math.sqrt((HVI2[i]*HVI2[i]) + (VVI2[i]*VVI2[i])))
                vel_dir = math.atan(VVI2[i]/HVI2[i])
                    
                theta = angs(vel_dir)
                e = es(vel_dir)
                       
                #convert
                ixdash = (ix * math.cos(theta)) - (abs(iy) * math.sin(theta))
                iydash = (ix * math.sin(theta)) + (abs(iy) * math.cos(theta))
                
                #slip/roll
                mu_c = (2*(ixdash + (r*iw)))/(7*(1+e)*(iydash))  
                if mu <= mu_c: #bounce
                    rxdash = ixdash - ((mu * abs(iydash))*(1+e))
                    rydash = e * abs(iydash)
                    rw = iw - (((5*mu)/(2*r))*(abs(iydash))*(1+e))
                else: #roll
                    rxdash = ((5/7)*ixdash) - ((2/7)*r*iw)
                    rydash = e*abs(iydash)
                    rw = -rxdash/r
                
                #output
                rx = (rxdash * math.cos(theta)) - (rydash * math.sin(theta))
                ry = (rxdash * math.sin(theta)) + (rydash * math.cos(theta))
                output_x_velocities2.append(rx)
                output_y_velocities2.append(ry)
                output_a_velocities2.append(rw)
                
            MSD_x2 = mean_squared_error(HVO2, output_x_velocities2, squared = False)/abs(statistics.mean(HVO2))
            MSD_y2 = mean_squared_error(VVO2, output_y_velocities2, squared = False)/abs(statistics.mean(VVO2))
            MSD_a2 = mean_squared_error(SO2, output_a_velocities2, squared = False)/abs(statistics.mean(SO2))
            errors.append(MSD_x2+MSD_y2+MSD_a2)
        errors = np.array(errors)
        min_idx = np.unravel_index(errors.argmin(), errors.shape)
        min_param = mus[min_idx]
    elif loc == 3:
        errors = []
        for e in es:
            output_x_velocities2 = []
            output_y_velocities2 = []
            output_a_velocities2 = []
            r = 0.0202
            for i in range(0, n2):
                #inputs
                ix = HVI2[i]
                iy = VVI2[i]
                iw = SI2[i]
                vel = (math.sqrt((HVI2[i]*HVI2[i]) + (VVI2[i]*VVI2[i])))
                vel_dir = math.atan(VVI2[i]/HVI2[i])
                    
                theta = angs(vel_dir)
                mu = mus(iw)
                       
                #convert
                ixdash = (ix * math.cos(theta)) - (abs(iy) * math.sin(theta))
                iydash = (ix * math.sin(theta)) + (abs(iy) * math.cos(theta))
                
                #slip/roll
                mu_c = (2*(ixdash + (r*iw)))/(7*(1+e)*(iydash))  
                if mu <= mu_c: #bounce
                    rxdash = ixdash - ((mu * abs(iydash))*(1+e))
                    rydash = e * abs(iydash)
                    rw = iw - (((5*mu)/(2*r))*(abs(iydash))*(1+e))
                else: #roll
                    rxdash = ((5/7)*ixdash) - ((2/7)*r*iw)
                    rydash = e*abs(iydash)
                    rw = -rxdash/r
                
                #output
                rx = (rxdash * math.cos(theta)) - (rydash * math.sin(theta))
                ry = (rxdash * math.sin(theta)) + (rydash * math.cos(theta))
                output_x_velocities2.append(rx)
                output_y_velocities2.append(ry)
                output_a_velocities2.append(rw)
                
            MSD_x2 = mean_squared_error(HVO2, output_x_velocities2, squared = False)/abs(statistics.mean(HVO2))
            MSD_y2 = mean_squared_error(VVO2, output_y_velocities2, squared = False)/abs(statistics.mean(VVO2))
            MSD_a2 = mean_squared_error(SO2, output_a_velocities2, squared = False)/abs(statistics.mean(SO2))
            errors.append(MSD_x2+MSD_y2+MSD_a2)    
        errors = np.array(errors)
        min_idx = np.unravel_index(errors.argmin(), errors.shape)
        min_param = es[min_idx]
    NRMSE = min(errors)
    return NRMSE

def two_param_search(angs, mus, es, loc1, loc2):
    if loc1 == 1 and loc2 == 2:
        errors = []
        for ang in angs:
            for mu in mus:
                #setup
                output_x_velocities2 = []
                output_y_velocities2 = []
                output_a_velocities2 = []
                r = 0.0202
                for i in range(0, n2):
                    #inputs
                    ix = HVI2[i]
                    iy = VVI2[i]
                    iw = SI2[i]
                    vel = (math.sqrt((HVI2[i]*HVI2[i]) + (VVI2[i]*VVI2[i])))
                    vel_dir = math.atan(VVI2[i]/HVI2[i]) 
                    theta = math.radians(ang)
                    e = es(vel_dir)             
                    #convert
                    ixdash = (ix * math.cos(theta)) - (abs(iy) * math.sin(theta))
                    iydash = (ix * math.sin(theta)) + (abs(iy) * math.cos(theta))   
                    #slip/roll
                    mu_c = (2*(ixdash + (r*iw)))/(7*(1+e)*(iydash))  
                    if mu <= mu_c: #bounce
                        rxdash = ixdash - ((mu * abs(iydash))*(1+e))
                        rydash = e * abs(iydash)
                        rw = iw - (((5*mu)/(2*r))*(abs(iydash))*(1+e))
                    else: #roll
                        rxdash = ((5/7)*ixdash) - ((2/7)*r*iw)
                        rydash = e*abs(iydash)
                        rw = -rxdash/r                 
                    #output
                    rx = (rxdash * math.cos(theta)) - (rydash * math.sin(theta))
                    ry = (rxdash * math.sin(theta)) + (rydash * math.cos(theta))
                    output_x_velocities2.append(rx)
                    output_y_velocities2.append(ry)
                    output_a_velocities2.append(rw)
            
                MSD_x2 = mean_squared_error(HVO2, output_x_velocities2, squared = False)/abs(statistics.mean(HVO2))
                MSD_y2 = mean_squared_error(VVO2, output_y_velocities2, squared = False)/abs(statistics.mean(VVO2))
                MSD_a2 = mean_squared_error(SO2, output_a_velocities2, squared = False)/abs(statistics.mean(SO2))
                errors.append(MSD_x2 + MSD_y2 + MSD_a2)
 
    elif loc1 == 1 and loc2 == 3:
        errors = []
        for ang in angs:
            for e in es:
                #setup
                output_x_velocities2 = []
                output_y_velocities2 = []
                output_a_velocities2 = []
                r = 0.0202
                for i in range(0, n2):
                    #inputs
                    ix = HVI2[i]
                    iy = VVI2[i]
                    iw = SI2[i]
                    vel = (math.sqrt((HVI2[i]*HVI2[i]) + (VVI2[i]*VVI2[i])))
                    vel_dir = math.atan(VVI2[i]/HVI2[i])    
                    theta = math.radians(ang)
                    mu = mus(iw)             
                    #convert
                    ixdash = (ix * math.cos(theta)) - (abs(iy) * math.sin(theta))
                    iydash = (ix * math.sin(theta)) + (abs(iy) * math.cos(theta))   
                    #slip/roll
                    mu_c = (2*(ixdash + (r*iw)))/(7*(1+e)*(iydash))  
                    if mu <= mu_c: #bounce
                        rxdash = ixdash - ((mu * abs(iydash))*(1+e))
                        rydash = e * abs(iydash)
                        rw = iw - (((5*mu)/(2*r))*(abs(iydash))*(1+e))
                    else: #roll
                        rxdash = ((5/7)*ixdash) - ((2/7)*r*iw)
                        rydash = e*abs(iydash)
                        rw = -rxdash/r                 
                    #output
                    rx = (rxdash * math.cos(theta)) - (rydash * math.sin(theta))
                    ry = (rxdash * math.sin(theta)) + (rydash * math.cos(theta))
                    output_x_velocities2.append(rx)
                    output_y_velocities2.append(ry)
                    output_a_velocities2.append(rw)
            
                MSD_x2 = mean_squared_error(HVO2, output_x_velocities2, squared = False)/abs(statistics.mean(HVO2))
                MSD_y2 = mean_squared_error(VVO2, output_y_velocities2, squared = False)/abs(statistics.mean(VVO2))
                MSD_a2 = mean_squared_error(SO2, output_a_velocities2, squared = False)/abs(statistics.mean(SO2))
                errors.append(MSD_x2 + MSD_y2 + MSD_a2)
                             
    elif loc1 == 2 and loc2 == 3:
        errors = []
        for mu in mus:
            for e in es:
                #setup
                output_x_velocities2 = []
                output_y_velocities2 = []
                output_a_velocities2 = []
                r = 0.0202
                for i in range(0, n2):
                    #inputs
                    ix = HVI2[i]
                    iy = VVI2[i]
                    iw = SI2[i]
                    vel = (math.sqrt((HVI2[i]*HVI2[i]) + (VVI2[i]*VVI2[i])))
                    vel_dir = math.atan(VVI2[i]/HVI2[i])              
                    theta = angs(vel_dir)             
                    #convert
                    ixdash = (ix * math.cos(theta)) - (abs(iy) * math.sin(theta))
                    iydash = (ix * math.sin(theta)) + (abs(iy) * math.cos(theta))   
                    #slip/roll
                    mu_c = (2*(ixdash + (r*iw)))/(7*(1+e)*(iydash))  
                    if mu <= mu_c: #bounce
                        rxdash = ixdash - ((mu * abs(iydash))*(1+e))
                        rydash = e * abs(iydash)
                        rw = iw - (((5*mu)/(2*r))*(abs(iydash))*(1+e))
                    else: #roll
                        rxdash = ((5/7)*ixdash) - ((2/7)*r*iw)
                        rydash = e*abs(iydash)
                        rw = -rxdash/r                 
                    #output
                    rx = (rxdash * math.cos(theta)) - (rydash * math.sin(theta))
                    ry = (rxdash * math.sin(theta)) + (rydash * math.cos(theta))
                    output_x_velocities2.append(rx)
                    output_y_velocities2.append(ry)
                    output_a_velocities2.append(rw)
            
                MSD_x2 = mean_squared_error(HVO2, output_x_velocities2, squared = False)/abs(statistics.mean(HVO2))
                MSD_y2 = mean_squared_error(VVO2, output_y_velocities2, squared = False)/abs(statistics.mean(VVO2))
                MSD_a2 = mean_squared_error(SO2, output_a_velocities2, squared = False)/abs(statistics.mean(SO2))
                errors.append(MSD_x2 + MSD_y2 + MSD_a2)     
    NRMSE = np.min(errors)
    return NRMSE
                
def three_param_search(ang, mu, e):
    output_x_velocities2 = []
    output_y_velocities2 = []
    output_a_velocities2 = []
    r = 0.0202
    for i in range(0, n2):
        #inputs
        ix = HVI2[i]
        iy = VVI2[i]
        iw = SI2[i]
        vel = (math.sqrt((HVI2[i]*HVI2[i]) + (VVI2[i]*VVI2[i])))
        vel_dir = math.atan(VVI2[i]/HVI2[i])       
        theta = math.radians(ang)
        #convert
        ixdash = (ix * math.cos(theta)) - (abs(iy) * math.sin(theta))
        iydash = (ix * math.sin(theta)) + (abs(iy) * math.cos(theta))
        #slip/roll
        mu_c = (2*(ixdash + (r*iw)))/(7*(1+e)*(iydash))  
        if mu <= mu_c: #bounce
            rxdash = ixdash - ((mu * abs(iydash))*(1+e))
            rydash = e * abs(iydash)
            rw = iw - (((5*mu)/(2*r))*(abs(iydash))*(1+e))
        else: #roll
            rxdash = ((5/7)*ixdash) - ((2/7)*r*iw)
            rydash = e*abs(iydash)
            rw = -rxdash/r 
        #output
        rx = (rxdash * math.cos(theta)) - (rydash * math.sin(theta))
        ry = (rxdash * math.sin(theta)) + (rydash * math.cos(theta))
        output_x_velocities2.append(rx)
        output_y_velocities2.append(ry)
        output_a_velocities2.append(rw)
    MSD_x2 = mean_squared_error(HVO2, output_x_velocities2, squared = False)/abs(statistics.mean(HVO2))
    MSD_y2 = mean_squared_error(VVO2, output_y_velocities2, squared = False)/abs(statistics.mean(VVO2))
    MSD_a2 = mean_squared_error(SO2, output_a_velocities2, squared = False)/abs(statistics.mean(SO2))
    NRMSE = (MSD_x2+MSD_y2+MSD_a2)
    return NRMSE



#equations
e1 = lambda vel_dir: (-0.33281765748235626*vel_dir) + 0.09744476624438424
e2 = lambda vel_dir: (-0.5808100164684972*vel_dir*vel_dir) - (1.3067161858714649*vel_dir) - (0.26785068067546297)
ang1 = lambda vel_dir: (0.29847962385686955*vel_dir) + 0.5188895708927335
ang2 = lambda vel_dir: (0.042429760295422794*vel_dir*vel_dir) - (0.369625575097289*vel_dir) - (0.1129896296098793)
mu1 = lambda iw: (0.00022760731301503694*iw) + (0.1260000378769747)
mu2 = lambda iw: (-4.5758166763325127e-08*iw*iw) + (0.0002612580061899179*iw) + (0.1252901534149737)
e_search = np.linspace(0, 1, 100)
mu_search = np.linspace(0, 1, 100)
ang_search = np.linspace(0, 40, 100)


#searches
a0_mu0_e0 = three_param_search(11.212121212121213, 0.19191919191919193, 0.4040404040404041)
print(a0_mu0_e0)

a0_mu0_e1 = two_param_search(ang_search, mu_search, e1, 1, 2)
print(a0_mu0_e1)

a0_mu0_e2 = two_param_search(ang_search, mu_search, e2, 1, 2)
print(a0_mu0_e2)

a0_mu1_e0 = two_param_search(ang_search, mu1, e_search, 1, 3)
print(a0_mu1_e0)

a0_mu1_e1 = one_param_search(ang_search, mu1, e1, 1)
print(a0_mu1_e1)

a0_mu1_e2 = one_param_search(ang_search, mu1, e2, 1)
print(a0_mu1_e2)

a0_mu2_e0 = two_param_search(ang_search, mu2, e_search, 1, 3)
print(a0_mu2_e0)

a0_mu2_e1 = one_param_search(ang_search, mu2, e1, 1)
print(a0_mu2_e1)

a0_mu2_e2 = one_param_search(ang_search, mu2, e2, 1)
print(a0_mu2_e2)

a1_mu0_e0 = two_param_search(ang1, mu_search, e_search, 2, 3)
print(a1_mu0_e0)

a1_mu0_e1 = one_param_search(ang1, mu_search, e1, 2)
print(a1_mu0_e1)

a1_mu0_e2 = one_param_search(ang1, mu_search, e2, 2)
print(a1_mu0_e2)

a1_mu1_e0 = one_param_search(ang1, mu1, e_search, 3)
print(a1_mu1_e0)

a1_mu1_e1 = no_param_search(ang1, mu1, e1)
print(a1_mu1_e1)

a1_mu1_e2 = no_param_search(ang1, mu1, e2)
print(a1_mu1_e2)

a1_mu2_e0 = one_param_search(ang1, mu2, e_search, 3)
print(a1_mu2_e0)

a1_mu2_e1 = no_param_search(ang1, mu2, e1)
print(a1_mu2_e1)

a1_mu2_e2 = no_param_search(ang1, mu2, e2)
print(a1_mu2_e2)

a2_mu0_e0 = two_param_search(ang2, mu_search, e_search, 2, 3)
print(a2_mu0_e0)

a2_mu0_e1 = one_param_search(ang2, mu_search, e1, 2)
print(a2_mu0_e1)

a2_mu0_e2 = one_param_search(ang2, mu_search, e2, 2)
print(a2_mu0_e2)

a2_mu1_e0 = one_param_search(ang2, mu1, e_search, 3)
print(a2_mu1_e0)

a2_mu1_e1 = no_param_search(ang2, mu1, e1)
print(a2_mu1_e1)

a2_mu1_e2 = no_param_search(ang2, mu1, e2)
print(a2_mu1_e2)

a2_mu2_e0 = one_param_search(ang2, mu2, e_search, 3)
print(a2_mu2_e0)

a2_mu2_e1 = no_param_search(ang2, mu2, e1)
print(a2_mu2_e1)

a2_mu2_e2 = no_param_search(ang2, mu2, e2)
print(a2_mu2_e2)


    
#%%

title_size = 20
lab_size = 15
tick_size = 13
fig, axs = plt.subplots(1,3,figsize=(15, 15))
xlocs = [0, 1, 2]
col1 = "orange"
col2 = "blue"
col3 = "green"

a0_m0 = [a0_mu0_e0, a0_mu0_e1, a0_mu0_e2]
a0_m1 = [a0_mu1_e0, a0_mu1_e1, a0_mu1_e2]
a0_m2 = [a0_mu2_e0, a0_mu2_e1, a0_mu2_e2]
a1_m0 = [a1_mu0_e0, a1_mu0_e1, a1_mu0_e2]
a1_m1 = [a1_mu1_e0, a1_mu1_e1, a1_mu1_e2]
a1_m2 = [a1_mu2_e0, a1_mu2_e1, a1_mu2_e2]
a2_m0 = [a2_mu0_e0, a2_mu0_e1, a2_mu0_e2]
a2_m1 = [a2_mu1_e0, a2_mu1_e1, a2_mu1_e2]
a2_m2 = [a2_mu2_e0, a2_mu2_e1, a2_mu2_e2]
axs[0].plot(a0_m0, label = r"$\mu=f$"+"(Constant)" , color = col1)
axs[0].plot(a0_m1, label = r"$\mu=f$"+"(Linear)", color = col2)
axs[0].plot(a0_m2, label = r"$\mu=f$"+"(Quadratic)", color = col3)
axs[0].scatter(xlocs, a0_m0, color = col1)
axs[0].scatter(xlocs, a0_m1, color = col2)
axs[0].scatter(xlocs, a0_m2, color = col3)
axs[0].set_box_aspect(1)
axs[0].set_xlim([-0.25, 2.25])
axs[0].set_ylim([1, 2.5])
axs[0].set_title(r"$\theta_c=f$"+"(Constant)", fontsize = title_size)
axs[0].set_ylabel(r"$\sum$"+"NRMSE", fontsize = lab_size)
axs[0].set_xticks([0, 1, 2])
axs[0].set_xticklabels([r"$e=f$"+"(Constant)", r"$e=f$"+"(Linear)", r"$e=f$"+"(Quadratic)"])
axs[0].scatter(-100000, -100000, facecolors = 'none', edgecolors = "r", lw = 1.5, label = "Optimal Combination")
axs[0].tick_params(axis='both', which='major', labelsize=tick_size)
axs[0].tick_params(axis="y", which="major", rotation = 90)
axs[0].set_yticks([1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4])



axs[1].plot(a1_m0, color = col1)
axs[1].plot(a1_m1, color = col2)
axs[1].plot(a1_m2, color = col3)
axs[1].scatter(xlocs, a1_m0, color = col1)
axs[1].scatter(xlocs, a1_m1, color = col2)
axs[1].scatter(xlocs, a1_m2, color = col3)
axs[1].scatter(1, 1.1789530189493946, color = col1, edgecolors = "r", lw = 1.5)
axs[1].set_box_aspect(1)
axs[1].set_xlim([-0.25, 2.25])
axs[1].set_ylim([1, 2.5])
axs[1].set_title(r"$\theta_c=f$"+"(Linear)", fontsize = title_size)
axs[1].set_ylabel(r"$\sum$"+"NRMSE", fontsize = lab_size)
axs[1].set_xticks([0, 1, 2])
axs[1].set_xticklabels([r"$e=f$"+"(Constant)", r"$e=f$"+"(Linear)", r"$e=f$"+"(Quadratic)"])
axs[1].tick_params(axis='both', which='major', labelsize=tick_size)
axs[1].tick_params(axis="y", which="major", rotation = 90)
axs[1].set_yticks([1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4])

axs[2].plot(a2_m0, color = col1)
axs[2].plot(a2_m1, color = col2)
axs[2].plot(a2_m2, color = col3)
axs[2].scatter(xlocs, a2_m0, color = col1)
axs[2].scatter(xlocs, a2_m1, color = col2)
axs[2].scatter(xlocs, a2_m2, color = col3)
axs[2].set_box_aspect(1)
axs[2].set_xlim([-0.25, 2.25])
axs[2].set_ylim([1, 2.5])
axs[2].set_title(r"$\theta_c=f$"+"(Quadratic)", fontsize = title_size)
axs[2].set_ylabel(r"$\sum$"+"NRMSE", fontsize = lab_size)
axs[2].set_xticks([0, 1, 2])
axs[2].set_xticklabels([r"$e=f$"+"(Constant)", r"$e=f$"+"(Linear)", r"$e=f$"+"(Quadratic)"])
axs[2].tick_params(axis='both', which='major', labelsize=tick_size)
axs[2].tick_params(axis="y", which="major", rotation = 90)
axs[2].set_yticks([1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4])
axs[0].legend()
