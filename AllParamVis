#imports and setup
import numpy  as np
import matplotlib.pyplot as plt
import pandas as pd
from matplotlib import cm
import math
import random
import matplotlib as mpl
import matplotlib.font_manager as font_manager
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
import statistics
from matplotlib import gridspec
import math
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc
import matplotlib as mpl
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
import statistics
import matplotlib.colors as colors
plt.style.use('default')
mpl.rcParams['font.family']='serif'
cmfont = font_manager.FontProperties(fname=mpl.get_data_path() + '/fonts/ttf/cmr10.ttf')
mpl.rcParams['font.serif']=cmfont.get_name()
mpl.rcParams['mathtext.fontset']='cm'
mpl.rcParams['axes.unicode_minus']=False

def truncate_colormap(cmap, minval=0.0, maxval=1.0, n=100):
    new_cmap = colors.LinearSegmentedColormap.from_list(
        'trunc({n},{a:.2f},{b:.2f})'.format(n=cmap.name, a=minval, b=maxval),
        cmap(np.linspace(minval, maxval, n)))
    return new_cmap


cmap1 = plt.get_cmap('gnuplot2_r')
lowval = 0.2
upval = 0.9
color_map = truncate_colormap(cmap1, 0.17, 0.9)
colormap2 = truncate_colormap(cmap1, 0.2, 0.9)


fig = plt.figure(figsize = (15,15))
NRMSE1 = np.load("/Users/TobyCheng/Desktop/One_mu.npy")
NRMSE2 = np.load("/Users/TobyCheng/Desktop/Two_mu_e.npy")
tick_size = 11
label_size = 12
title_size = 13


#plot1
mu_vals = np.linspace(0, 1, 1000)
colors = cm.gnuplot2_r(NRMSE1 / float(max(NRMSE1)))
im = plt.scatter(NRMSE1, NRMSE1, c = NRMSE1, cmap = colormap2)
plt.clf()

ax1 = fig.add_subplot(1, 3, 1, )
ax1.bar(mu_vals, NRMSE1, width = 0.01, color = colors)
ax1.set_xlim([0, 1])
ax1.set_box_aspect(1)
ax1.set_xlabel("Coefficient of Restitution ("+r'$e$)', fontsize = label_size)
ax1.set_ylabel("")
ax1.tick_params(axis='both', which='major', labelsize=tick_size)
ax1.set_title("(a)", fontsize = title_size)
ax1.set_xticks([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])
ax1.set_yticks([])



#plot2
xlocs = np.linspace(0, 200, 11)
ylocs = np.linspace(0, 200, 11)

ax2 = fig.add_subplot(1, 3, 2)
ax2.imshow(NRMSE2, cmap = color_map)
ax2.set_box_aspect(1)
ax2.set_xlabel("Coefficient of Restitution ("+r'$e$)', fontsize = label_size)
ax2.set_ylabel("Coefficient of Fridction ("+r'$\mu$)', fontsize = label_size)
ax2.tick_params(axis='both', which='major', labelsize=tick_size)
ax2.set_title("(b)", fontsize = title_size)
ax2.set_xticks(xlocs, [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])
ax2.set_yticks(ylocs, [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])


#plot3
V = np.load("/Users/TobyCheng/Desktop/V_Course.npy")
Z = np.load("/Users/TobyCheng/Desktop/Z_Course.npy")
angles = np.linspace(10, 40, 100)
mus = np.linspace(0, 1, 100)
es = np.linspace(0, 1, 100)
X, Y = np.meshgrid(es, mus)
colormap = color_map
color_dimension = V 
minn, maxx = color_dimension.min(), color_dimension.max()
norm = mpl.colors.Normalize(minn, maxx)
m = plt.cm.ScalarMappable(norm=norm, cmap=colormap)
m.set_array([])
fcolors = m.to_rgba(color_dimension)

ax3 = fig.add_subplot(1, 3, 3, projection = '3d')
ax3.plot_surface(X,Y,Z, rstride=1, cstride=1, facecolors=fcolors, vmin=minn, vmax=maxx, shade=False)
ax3.zaxis.set_rotate_label(False)
ax3.set_xlabel("Coefficient of Restitution ("+r'$e$)', fontsize = label_size)
ax3.set_ylabel("Coefficient of Fridction ("+r'$\mu$)', fontsize = label_size)
ax3.set_zlabel("Angle of Turf ("+r'$\theta_c$)', rotation = 90, fontsize = label_size)
ax3.view_init(elev=22.5, azim=45, roll=0)
ax3.set_aspect('auto')
ax3.set_xlim([0, 1])
ax3.set_ylim([0, 1])
ax3.set_zlim([10, 40])
ax3.grid(False)
ax3.xaxis.pane.set_edgecolor('black')
ax3.yaxis.pane.set_edgecolor('black')
ax3.zaxis.pane.set_edgecolor('black')
ax3.tick_params(axis='both', which='major', labelsize=tick_size)
ax3.set_title("(c)", fontsize = title_size)
fig.canvas.show()

#colorbar
cbar_ax = fig.add_axes([0.94, 0.27, 0.02, 0.45])
cbar = fig.colorbar(im, cax=cbar_ax)
cbar.set_label(r'$\sum$'+"NRMSE")

print(min(NRMSE1))
print(np.min(NRMSE2))
print(np.min(V))
