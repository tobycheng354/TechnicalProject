import math
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc
import matplotlib as mpl
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
import statistics
import matplotlib.colors as colors
plt.style.use('default')
rc = {"font.family" : "serif", 
      "mathtext.fontset" : "stix"}
plt.rcParams.update(rc)
plt.rcParams["font.serif"] = ["Times New Roman"] + plt.rcParams["font.serif"]
COLOR = 'black'
mpl.rcParams['text.color'] = COLOR
mpl.rcParams['axes.labelcolor'] = COLOR
mpl.rcParams['xtick.color'] = COLOR
mpl.rcParams['ytick.color'] = COLOR


#data
data1 = pd.read_csv("~/Desktop/ResultsAstro.csv")
HVI1 = data1['HorizontalVelIn']
VVI1 = data1['VerticalVelIn']
SI1 = data1['SpinIn']
HVO1 = data1['HorizontalVelOut']
VVO1 = data1['VerticalVelOut']
SO1 = data1['SpinOut']
n1 = len(data1)

data2 = pd.read_csv("~/Desktop/ResultsCourse.csv")
HVI2 = data2['HorizontalVelIn']
VVI2 = data2['VerticalVelIn']
SI2 = data2['SpinIn']
HVO2 = data2['HorizontalVelOut']
VVO2 = data2['VerticalVelOut']
SO2 = data2['SpinOut']
n2 = len(data2)

#ASTRO
#setup
output_x_velocities1 = []
output_y_velocities1 = []
output_a_velocities1 = []
r = 0.0202
for i in range(0, n1):
    #inputs
    ix = HVI1[i]
    iy = VVI1[i]
    iw = SI1[i]
    vel = (math.sqrt((HVI1[i]*HVI1[i]) + (VVI1[i]*VVI1[i])))
    vel_dir = math.atan(VVI1[i]/HVI1[i])
    mu = 0.242
    ang = 15.4 * (vel / 18.6)  * (math.degrees(vel_dir) / 44.4)

    
    #convert
    theta = math.radians(abs(ang))
    ixdash = (ix * math.cos(theta)) - (abs(iy) * math.sin(theta))
    iydash = (ix * math.sin(theta)) + (abs(iy) * math.cos(theta))
    
    if abs(iy) <= 20:
        e = 0.510 - (0.0375 * abs(iydash)) + (0.000903 * abs(iydash) * abs(iydash))
    else:
        e = 0.120
        

    #slip/roll
    mu_c = (2*(ixdash + (r*iw)))/(7*(1+e)*(iydash))  
    if mu <= mu_c: #bounce
        rxdash = ixdash - ((mu * abs(iydash))*(1+e))
        rydash = e * abs(iydash)
        rw = iw - (((5*mu)/(2*r))*(abs(iydash))*(1+e))
    else: #roll
        rxdash = ((5/7)*ixdash) - ((2/7)*r*iw)
        rydash = e*abs(iydash)
        rw = -rxdash/r
    
    #output
    rx = (rxdash * math.cos(theta)) - (rydash * math.sin(theta))
    ry = (rxdash * math.sin(theta)) + (rydash * math.cos(theta))
    output_x_velocities1.append(rx)
    output_y_velocities1.append(ry)
    output_a_velocities1.append(rw)


#COURSE
#setup
output_x_velocities2 = []
output_y_velocities2 = []
output_a_velocities2 = []
r = 0.0202
for i in range(0, n2):
    #inputs
    ix = HVI2[i]
    iy = VVI2[i]
    iw = SI2[i]
    vel = (math.sqrt((HVI2[i]*HVI2[i]) + (VVI2[i]*VVI2[i])))
    vel_dir = math.atan(VVI2[i]/HVI2[i])
    mu = 0.354
        
    ang = 15.4 * (vel / 18.6)  * (math.degrees(vel_dir) / 44.4)
    
    #convert
    theta = math.radians(abs(ang))
    ixdash = (ix * math.cos(theta)) - (abs(iy) * math.sin(theta))
    iydash = (ix * math.sin(theta)) + (abs(iy) * math.cos(theta))
    
    if abs(iy) <= 20:
        e = 0.510 - (0.0375 * abs(iydash)) + (0.000903 * abs(iydash) * abs(iydash))
    else:
        e = 0.120

    #slip/roll
    mu_c = (2*(ixdash + (r*iw)))/(7*(1+e)*(iydash))  
    if mu <= mu_c: #bounce
        rxdash = ixdash - ((mu * abs(iydash))*(1+e))
        rydash = e * abs(iydash)
        rw = iw - (((5*mu)/(2*r))*(abs(iydash))*(1+e))
    else: #roll
        rxdash = ((5/7)*ixdash) - ((2/7)*r*iw)
        rydash = e*abs(iydash)
        rw = -rxdash/r
    
    #output
    rx = (rxdash * math.cos(theta)) - (rydash * math.sin(theta))
    ry = (rxdash * math.sin(theta)) + (rydash * math.cos(theta))
    output_x_velocities2.append(rx)
    output_y_velocities2.append(ry)
    output_a_velocities2.append(rw)




#CMAP
def truncate_colormap(cmap, minval=0.0, maxval=1.0, n=100):
    new_cmap = colors.LinearSegmentedColormap.from_list(
        'trunc({n},{a:.2f},{b:.2f})'.format(n=cmap.name, a=minval, b=maxval),
        cmap(np.linspace(minval, maxval, n)))
    return new_cmap
cmap1 = plt.get_cmap('Blues')
cmap2 = plt.get_cmap("Oranges")
lowval = 0.2
upval = 0.3
bin_num = 50
cmapcol1 = truncate_colormap(cmap1, lowval, upval)
cmapcol2 = truncate_colormap(cmap2, lowval, upval)


#MINVALS
min_val_x = min(min(HVO1), min(HVO2), min(output_x_velocities1), min(output_x_velocities2))
max_val_x = max(max(HVO1), max(HVO2), max(output_x_velocities1), max(output_x_velocities2))
min_val_y = min(min(VVO1), min(VVO2), min(output_y_velocities1), min(output_y_velocities2))
max_val_y = max(max(VVO1), max(VVO2), max(output_y_velocities1), max(output_y_velocities2))
min_val_a = min(min(SO1), min(SO2), min(output_a_velocities1), min(output_a_velocities2))
max_val_a = max(max(SO1), max(SO2), max(output_a_velocities1), max(output_a_velocities2))



#LINE OF BEST FITS
def line_of_best_fit(trueval, pred, minval, maxval):
    c = np.polyfit(trueval, pred, 1)
    line = []
    X = np.arange(minval, maxval)
    for x in X:
        line.append((c[0]*x)+c[1])
    return X, line, c
x1, lx1, cx1 = line_of_best_fit(HVO1,output_x_velocities1, min_val_x, max_val_x)
x2, lx2, cx2 = line_of_best_fit(HVO2,output_x_velocities2, min_val_x, max_val_x)
y1, ly1, cy1 = line_of_best_fit(VVO1,output_y_velocities1, min_val_y, max_val_y)
y2, ly2, cy2 = line_of_best_fit(VVO2,output_y_velocities2, min_val_y, max_val_y)
a1, la1, ca1 = line_of_best_fit(SO1,output_a_velocities1, min_val_a, max_val_a)
a2, la2, ca2 = line_of_best_fit(SO2,output_a_velocities2, min_val_a, max_val_a)


#PLOT PARAMS
lwidth1 = 2
lwidth2 = 2
tick_size = 10
lab_size = 15
title_size = 20



#PLOT
fig, axs = plt.subplots(1,3,figsize=(15, 15))
axs[0].hist2d(HVO1, output_x_velocities1, bins = bin_num, cmin = 1, cmap = cmapcol1)
axs[0].hist2d(HVO2, output_x_velocities2, bins = bin_num, cmin = 1, cmap = cmapcol2)
axs[0].plot(x1, lx1, "--", color = "tab:blue", linewidth = lwidth1, label = "Astro")
axs[0].plot(x2, lx2, "--", color = "tab:orange", linewidth = lwidth1, label = "Course")
axs[0].plot(np.arange(min_val_x, max_val_x), np.arange(min_val_x, max_val_x), "-", color ='black', linewidth = lwidth2, label = "Perfect Model")
axs[0].set_xlabel("Predictions "+r"$m\;s^{-1}$", fontsize = lab_size)
axs[0].set_ylabel("True Value "+r"$m\;s^{-1}$", fontsize = lab_size)
axs[0].set_box_aspect(1)
axs[0].tick_params(axis='both', which='major', labelsize=tick_size)
axs[0].legend()
axs[0].set_title(r"$\dot{x}$", fontsize = title_size)

axs[1].hist2d(VVO1, output_y_velocities1, bins = bin_num, cmin = 1, cmap = cmapcol1)
axs[1].hist2d(VVO2, output_y_velocities2, bins = bin_num, cmin = 1, cmap = cmapcol2)
axs[1].plot(y1, ly1, "--", color = "tab:blue", linewidth = lwidth1)
axs[1].plot(y2, ly2, "--", color = "tab:orange", linewidth = lwidth1)
axs[1].plot(np.arange(min_val_y, max_val_y), np.arange(min_val_y, max_val_y), "-", color ='black', linewidth = lwidth2)
axs[1].set_xlabel("Predictions "+r"$m\;s^{-1}$", fontsize = lab_size)
axs[1].set_ylabel("True Value "+r"$m\;s^{-1}$", fontsize = lab_size)
axs[1].set_box_aspect(1)
axs[1].tick_params(axis='both', which='major', labelsize=tick_size)
axs[1].set_title(r"$\dot{y}$", fontsize = title_size)
    
axs[2].hist2d(SO1, output_a_velocities1, bins = bin_num, cmin = 1, cmap = cmapcol1)
axs[2].hist2d(SO2, output_a_velocities2, bins = bin_num, cmin = 1, cmap = cmapcol2)
axs[2].plot(a1, la1, "--", color = "tab:blue", linewidth = lwidth1)
axs[2].plot(a2, la2, "--", color = "tab:orange", linewidth = lwidth1)
axs[2].plot(np.arange(min_val_a, max_val_a), np.arange(min_val_a, max_val_a), "-", color ='black', linewidth = lwidth2)
axs[2].set_xlabel("Predictions "+r"$rad\;s^{-1}$", fontsize = lab_size)
axs[2].set_ylabel("True Value "+r"$rad\;s^{-1}$", fontsize = lab_size)
axs[2].set_box_aspect(1)
axs[2].tick_params(axis='both', which='major', labelsize=tick_size)
axs[2].tick_params(axis="y", which='major', rotation = 90)
axs[2].set_title(r"$\dot{\theta}$", fontsize = title_size)

#METRICS
num_digits_shown = 6
print("Astro:")
MSD_x1 = mean_squared_error(HVO1, output_x_velocities1, squared = False)/abs(statistics.mean(HVO1))
MSD_y1 = mean_squared_error(VVO1, output_y_velocities1, squared = False)/abs(statistics.mean(VVO1))
MSD_a1 = mean_squared_error(SO1, output_a_velocities1, squared = False)/abs(statistics.mean(SO1))
print("MSE:", (str(MSD_x1))[:num_digits_shown], (str(MSD_y1))[:num_digits_shown], (str(MSD_a1))[:num_digits_shown])
r2_x1 = r2_score(HVO1, output_x_velocities1)
r2_y1 = r2_score(VVO1, output_y_velocities1)
r2_a1 = r2_score(SO1, output_a_velocities1)
print("R^2:", (str(r2_x1))[:num_digits_shown], (str(r2_y1))[:num_digits_shown], (str(r2_a1))[:num_digits_shown])
m_x1 = abs(1 - cx1[0])
m_y1 = abs(1 - cy1[0])
m_a1 = abs(1 - ca1[0])
print("m:", (str(m_x1))[:num_digits_shown], (str(m_y1))[:num_digits_shown], (str(m_a1))[:num_digits_shown])
C_x1 = abs(0 - cx1[1])
C_y1 = abs(0 - cy1[1])
C_a1 = abs(0 - ca1[1])
print("C:", (str(C_x1))[:num_digits_shown], (str(C_y1))[:num_digits_shown], (str(C_a1))[:num_digits_shown])


print("Course:")
MSD_x2 = mean_squared_error(HVO2, output_x_velocities2, squared = False)/abs(statistics.mean(HVO2))
MSD_y2 = mean_squared_error(VVO2, output_y_velocities2, squared = False)/abs(statistics.mean(VVO2))
MSD_a2 = mean_squared_error(SO2, output_a_velocities2, squared = False)/abs(statistics.mean(SO2))
print("MSE:", (str(MSD_x2))[:num_digits_shown], (str(MSD_y2))[:num_digits_shown], (str(MSD_a2))[:num_digits_shown])
r2_x2 = r2_score(HVO2, output_x_velocities2)
r2_y2 = r2_score(VVO2, output_y_velocities2)
r2_a2 = r2_score(SO2, output_a_velocities2)
print("R^2:", (str(r2_x2))[:num_digits_shown], (str(r2_y2))[:num_digits_shown], (str(r2_a2))[:num_digits_shown])
m_x2 = abs(1 - cx2[0])
m_y2 = abs(1 - cy2[0])
m_a2 = abs(1 - ca2[0])
print("m:", (str(m_x2))[:num_digits_shown], (str(m_y2))[:num_digits_shown], (str(m_a2))[:num_digits_shown])
C_x2 = abs(0 - cx2[1])
C_y2 = abs(0 - cy2[1])
C_a2 = abs(0 - ca2[1])
print("C:", (str(C_x2))[:num_digits_shown], (str(C_y2))[:num_digits_shown], (str(C_a2))[:num_digits_shown])

