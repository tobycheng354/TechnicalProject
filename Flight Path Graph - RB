#imports and setup
import numpy  as np
import matplotlib.pyplot as plt
import pandas as pd
import math
import random
from matplotlib import cm
from matplotlib.legend_handler import HandlerTuple
plt.rcParams["font.family"] = "Times New Roman"
plt.style.use('ggplot')

#data
data1 = pd.read_csv("~/Desktop/ResultsAstro.csv") #MUST CHANGE LOCATION FURTHER DOWN AS WELL
n1 = len(data1)
HVI1 = data1['HorizontalVelIn']
VVI1 = data1['VerticalVelIn']
SI1 = data1['SpinIn']
HVO1 = data1['HorizontalVelOut']
VVO1 = data1['VerticalVelOut']
SO1 = data1['SpinOut']

data2 = pd.read_csv("~/Desktop/ResultsCourse.csv") #MUST CHANGE LOCATION FURTHER DOWN AS WELL
n2 = len(data2)
HVI2 = data2['HorizontalVelIn']
VVI2 = data2['VerticalVelIn']
SI2 = data2['SpinIn']
HVO2 = data2['HorizontalVelOut']
VVO2 = data2['VerticalVelOut']
SO2 = data2['SpinOut']

#THINGS TO CHANGE FOR HAAKE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
tval = 5#time before bounce shown

#values for ball plots
#idxs1 = random.sample(range(0, n1-1), 3) #random subset of 3
#idxs2 = random.sample(range(0, n2-1), 3) #random subset of 3
idxs1 = [157, 8, 269] #cool looking set for astro
idxs2 = [557, 43, 98] #cool looking set for course

#CHANGE LIMITS AND GRAPH STUFF AND OFC HAAKE EQUATIONS


def traj_i(ix, iy):
    uy = iy - (-9.81 * 0.5)
    sx = []
    sy = []
    time = np.linspace(0, tval, 100)
    sx_final = ix * tval
    sy_final = (uy*tval) + (0.5 * -9.81 * tval * tval)
    for t in time:
        sx.append((ix*t) - sx_final)
        sy.append((uy*t) + (0.5 * -9.81 * t * t) - sy_final)
    return sx, sy
      
def traj_r(ix, iy):
    sx = []
    sy = []
    time = np.linspace(0, 3, 5000)
    for t in time:
        sy.append((iy*t) + (0.5 * -9.81 * t * t))
        sx.append(ix*t)
        if sy[-1] < 0:
            break
    return sx, sy
    
def bounce(idx, data):
    HVI = data['HorizontalVelIn']
    VVI = data['VerticalVelIn']
    SI = data['SpinIn']
    HVO = data['HorizontalVelOut']
    VVO = data['VerticalVelOut']
    SO = data['SpinOut']
    r = 0.0202
    #inputs
    ix = HVI[idx]
    iy = VVI[idx]
    iw = SI[idx]
    vel = (math.sqrt((HVI[idx]*HVI[idx]) + (VVI[idx]*VVI[idx])))
    vel_dir = math.atan(VVI[idx]/HVI[idx])
    #param equations
    if len(data) == len(data1): #which course plot
        ang = 6.868897419854141262e+00 * vel_dir * vel_dir + 2.560211296095917533e+01 * vel_dir + 3.241682870516302728e+01
        e = -3.296131337405492912e-01 * vel_dir + 9.525887488395337610e-02
        mu = 0.148
    else:
        ang = 7.833226275965229357e-01 * HVI[idx] + 5.395187520086353494e+00
        mu = 0.281
        e = -8.910544728940832451e-03 * HVI[idx] + 3.019853429438483228e-01
    #convert
    theta = math.radians(ang)
    ixdash = (ix * math.cos(theta)) - (abs(iy) * math.sin(theta))
    iydash = (ix * math.sin(theta)) + (abs(iy) * math.cos(theta))
    #slip/roll
    mu_c = (2*(ixdash + (r*iw)))/(7*(1+e)*(iydash))  
    if mu <= mu_c: #bounce
        rxdash = ixdash - ((mu * abs(iydash))*(1+e))
        rydash = e * abs(iydash)
        rw = iw - (((5*mu)/(2*r))*(abs(iydash))*(1+e))
    else: #roll
        rxdash = ((5/7)*ixdash) - ((2/7)*r*iw)
        rydash = e*abs(iydash)
        rw = -rxdash/r
    #output
    rx = (rxdash * math.cos(theta)) - (rydash * math.sin(theta))
    ry = (rxdash * math.sin(theta)) + (rydash * math.cos(theta))
    return rx, ry



colors = ["firebrick", "darkorange", "cornflowerblue"]
fig, axs = plt.subplots(1,2,figsize=(15, 15))


j = 0
for idx in idxs1:
    x_displacements1 = []
    y_displacements1 = []
    rx = HVO1[idx]
    ry = VVO1[idx]
    x_displacements1 = x_displacements1 + traj_r(rx, ry)[0]
    y_displacements1 = y_displacements1 + traj_r(rx, ry)[1]
    axs[0].plot(x_displacements1, y_displacements1, "--", color = colors[j], linewidth = 1.5, label = "Model Prediction")
    j += 1

j = 0
for idx in idxs1:
    x_real_displacements1 = []
    y_real_displacements1 = []
    ix = HVI1[idx]
    iy = VVI1[idx]
    x_real_displacements1 = x_real_displacements1 + traj_i(ix, iy)[0]
    y_real_displacements1 = y_real_displacements1 + traj_i(ix, iy)[1]
    ix = x_real_displacements1[-1]
    iy = y_real_displacements1[-1]
    rx, ry = bounce(idx, data1)
    del x_real_displacements1[-1]
    del y_real_displacements1[-1]
    x_real_displacements1 = x_real_displacements1 + traj_r(rx, ry)[0]
    y_real_displacements1 = y_real_displacements1 + traj_r(rx, ry)[1]     
    axs[0].plot(x_real_displacements1, y_real_displacements1, "-", color = colors[j], linewidth = 1.5, label = "Actual Data")
    j += 1


axs[0].annotate("Instantenous moment of impact", [-0.13, 2], rotation = 90, color = 'dimgrey', fontsize = 9)
axs[0].axvline(x=0, color='dimgrey', linestyle='--', linewidth = 0.5)
axs[0].axhspan(ymin = -1, ymax = 0, color = "olivedrab", alpha = 0.5)
axs[0].set(ylabel = "Vertical Displacement (m)", xlabel = "Horizontal Displacement (m)")
axs[0].set_box_aspect(1)
#this will change depending on plot
axs[0].set_xlim([-2, 3])
axs[0].set_ylim([-0.5, 5])



j = 0
for idx in idxs2:
    x_displacements2 = []
    y_displacements2 = []
    rx = HVO2[idx]
    ry = VVO2[idx]
    x_displacements2 = x_displacements2 + traj_r(rx, ry)[0]
    y_displacements2 = y_displacements2 + traj_r(rx, ry)[1]
    axs[1].plot(x_displacements2, y_displacements2, "--", color = colors[j], linewidth = 1.5, label = "Model Predictions")
    j += 1

j = 0
for idx in idxs2:
    x_real_displacements2 = []
    y_real_displacements2 = []
    ix = HVI2[idx]
    iy = VVI2[idx]
    x_real_displacements2 = x_real_displacements2 + traj_i(ix, iy)[0]
    y_real_displacements2 = y_real_displacements2 + traj_i(ix, iy)[1]
    ix = x_real_displacements2[-1]
    iy = y_real_displacements2[-1]
    rx, ry = bounce(idx, data2)
    del x_real_displacements2[-1]
    del y_real_displacements2[-1]
    x_real_displacements2 = x_real_displacements2 + traj_r(rx, ry)[0]
    y_real_displacements2 = y_real_displacements2 + traj_r(rx, ry)[1]     
    axs[1].plot(x_real_displacements2, y_real_displacements2, "-", color = colors[j], linewidth = 1.5, label = "Actual Data")
    j += 1


axs[1].annotate("Instantenous moment of impact", [-0.13, 2], rotation = 90, color = 'dimgrey', fontsize = 9)
axs[1].axvline(x=0, color='dimgrey', linestyle='--', linewidth = 0.5)
axs[1].axhspan(ymin = -1, ymax = 0, color = "olivedrab", alpha = 0.5)
axs[1].set(ylabel = "Vertical Displacement (m)", xlabel = "Horizontal Displacement (m)")
axs[1].set_box_aspect(1)
#this will change depending on plot
axs[1].set_xlim([-2, 3])
axs[1].set_ylim([-0.5, 5])

#legend
handles, labels = axs[1].get_legend_handles_labels()
unique_labels = list(np.unique(labels))
combined_handles = [tuple([h for h, l in zip(handles, labels) if l == label]) for label in unique_labels]

axs[1].legend(handles=combined_handles, labels=unique_labels, handlelength=3,
          handler_map={tuple: HandlerTuple(ndivide=None, pad=0)})
